import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport Icon from '../AppIcon';\n\nconst SimpleRealTimeChart = ({ \n  data = [], \n  title = 'Chart',\n  color = '#3B82F6',\n  height = 300,\n  loading = false,\n  error = null\n}) => {\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const [dimensions, setDimensions] = useState({ width: 800, height });\n\n  // Handle container resize\n  useEffect(() => {\n    const handleResize = () => {\n      if (containerRef.current) {\n        const { width } = containerRef.current.getBoundingClientRect();\n        setDimensions({ width: width - 40, height });\n      }\n    };\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [height]);\n\n  // Simple line chart component\n  const LineChart = ({ data, color = '#3B82F6' }) => {\n    if (!data || data.length === 0) return null;\n    \n    const maxValue = Math.max(...data.map(d => d.value || 0));\n    const minValue = Math.min(...data.map(d => d.value || 0));\n    const range = maxValue - minValue || 1;\n\n    return (\n      <div className=\"h-64 w-full relative\">\n        <svg className=\"w-full h-full\" viewBox=\"0 0 400 200\">\n          <defs>\n            <linearGradient id={`gradient-${color.replace('#', '')}`} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n              <stop offset=\"0%\" stopColor={color} stopOpacity=\"0.3\" />\n              <stop offset=\"100%\" stopColor={color} stopOpacity=\"0.05\" />\n            </linearGradient>\n          </defs>\n          \n          {/* Grid lines */}\n          {[0, 1, 2, 3, 4].map(i => (\n            <line\n              key={i}\n              x1=\"0\"\n              y1={i * 40}\n              x2=\"400\"\n              y2={i * 40}\n              stroke=\"#E5E7EB\"\n              strokeWidth=\"1\"\n            />\n          ))}\n          \n          {/* Data line */}\n          <polyline\n            fill=\"none\"\n            stroke={color}\n            strokeWidth=\"2\"\n            points={data.map((point, index) => {\n              const x = (index / (data.length - 1)) * 400;\n              const y = 180 - ((point.value - minValue) / range) * 160;\n              return `${x},${y}`;\n            }).join(' ')}\n          />\n          \n          {/* Fill area */}\n          <polygon\n            fill={`url(#gradient-${color.replace('#', '')})`}\n            points={`0,180 ${data.map((point, index) => {\n              const x = (index / (data.length - 1)) * 400;\n              const y = 180 - ((point.value - minValue) / range) * 160;\n              return `${x},${y}`;\n            }).join(' ')} 400,180`}\n          />\n          \n          {/* Data points */}\n          {data.map((point, index) => {\n            const x = (index / (data.length - 1)) * 400;\n            const y = 180 - ((point.value - minValue) / range) * 160;\n            return (\n              <circle\n                key={index}\n                cx={x}\n                cy={y}\n                r=\"3\"\n                fill={color}\n                className=\"hover:r-5 transition-all\"\n              />\n            );\n          })}\n        </svg>\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">{title}</h3>\n          <div className=\"animate-pulse w-8 h-8 bg-gray-200 rounded\"></div>\n        </div>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">{title}</h3>\n          <Icon name=\"AlertTriangle\" size={20} className=\"text-red-500\" />\n        </div>\n        <div className=\"flex items-center justify-center h-64 text-center\">\n          <div>\n            <Icon name=\"AlertTriangle\" size={48} className=\"text-red-400 mx-auto mb-2\" />\n            <p className=\"text-red-600 font-medium\">Error loading chart</p>\n            <p className=\"text-red-500 text-sm\">{error}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"bg-white rounded-xl p-6 border border-gray-200\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">{title}</h3>\n          <Icon name=\"BarChart\" size={20} className=\"text-gray-400\" />\n        </div>\n        <div className=\"flex items-center justify-center h-64 text-center\">\n          <div>\n            <Icon name=\"BarChart\" size={48} className=\"text-gray-400 mx-auto mb-2\" />\n            <p className=\"text-gray-600 font-medium\">No data available</p>\n            <p className=\"text-gray-500 text-sm\">Data will appear here once available</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-xl p-6 border border-gray-200\" ref={containerRef}>\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">{title}</h3>\n        <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n          <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: color }}></div>\n          <span>{title}</span>\n        </div>\n      </div>\n      <LineChart data={data} color={color} />\n    </div>\n  );\n};\n\nexport default SimpleRealTimeChart;"